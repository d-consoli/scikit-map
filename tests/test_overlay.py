import geopandas as gp
import rasterio as rio
import pytest
import numpy as np
import tempfile
from pathlib import Path
import os
import pygeos as pg
from functools import reduce
from operator import and_

from eumap.mapper import SpaceOverlay, SpaceTimeOverlay

N_POINTS = 1000
YEARS = np.arange(2000, 2022)
DATA_SHAPE = (128, 128)
CRS = 'EPSG:3857'
DTYPE = np.uint16

HEIGHT, WIDTH = DATA_SHAPE
RASTER_PROFILE = dict(
    driver='GTiff',
    transform=rio.Affine(
        1, 0, 0,
        0, -1, HEIGHT,
    ),
    width=WIDTH,
    height=HEIGHT,
    count=1,
    tiled=True,
    blockxsize=32,
    blockysize=32,
    compress='deflate',
    crs=CRS,
    dtype=DTYPE,
    nodata=0,
)

class _DatasetGenerator:
    def __enter__(self):
        '''
        Make some dummy rasters in a tmpdir
        and some points
        '''
        self.dir = Path(tempfile.mkdtemp())
        years = np.random.choice(YEARS, N_POINTS)
        dates = [
            f'{y}-01-01'
            for y in years
        ]
        x = np.random.randint(1, WIDTH, N_POINTS)
        y = np.random.randint(1, HEIGHT, N_POINTS)
        self.points = gp.GeoDataFrame(dict(
            geometry=pg.points(x+.5, y+.5),
            x=x,
            y=y,
            date=dates,
            year=years,
        ))
        print(self.points.x)
        self.rasters = [*map(
            self._generate_raster,
            YEARS,
        )]
        return self

    def _generate_raster(self, year):
        rpath = self.dir / f'{year}.tif'
        with rio.open(
            rpath, 'w',
            **RASTER_PROFILE,
        ) as dst:
            data = np.zeros(
                shape=DATA_SHAPE,
                dtype=DTYPE,
            )
            data[
                HEIGHT-1-self.points.y,
                self.points.x,
            ] = year
            dst.write(data, 1)
        return rpath
        
    def __exit__(self, *e_args):
        '''
        Clean up
        '''
        __ = [f.unlink() for f in self.dir.glob('*')]
        self.dir.rmdir()
        
class TestOverlay:
    def test_SpaceOverlay(self):
        '''
        Test if the dataframe generated by SpaceOverlay
        has a column for each raster and that
        the correct values were sampled
        '''
        with _DatasetGenerator() as datagen:
            overlay = SpaceOverlay(
                datagen.points.copy(),
                fn_layers=datagen.rasters,
                verbose=False,
            )
            data = overlay.run()
            assert reduce(and_, (
                data[str(year)] == year
                for year in YEARS
            )).all()

    def test_SpaceTimeOverlay(self):
        '''
        Test if the dataframe generated by SpaceTimeOverlay
        has the correct time-wise values sampled
        '''
        with _DatasetGenerator() as datagen:
            overlay = SpaceTimeOverlay(
                points=datagen.points.copy(),
                fn_layers=[datagen.dir/'{year}.tif'],
                col_date='date',
                verbose=False,
            )
            data = overlay.run()
            assert (data.year == data['']).all()
