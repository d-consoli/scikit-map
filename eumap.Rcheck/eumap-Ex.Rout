
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
<<<<<<< Updated upstream
Platform: x86_64-pc-linux-gnu (64-bit)
=======
Platform: x86_64-w64-mingw32/x64 (64-bit)
>>>>>>> Stashed changes

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "eumap"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
<<<<<<< Updated upstream
=======
> options(pager = "console")
>>>>>>> Stashed changes
> base::assign(".ExTimings", "eumap-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('eumap')
version: 0.0.4
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("extract_tif")
> ### * extract_tif
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: extract_tif
> ### Title: Extract points from a GeoTIFF using spatiotemporal overlay
> ### Aliases: extract_tif
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(terra)
> ##D tif.name = "R-sample-tiles/9529/2000/landsat_ard_fall_blue_p50.tif"
> ##D strip_dates(tif.name, type="begin")
> ##D tif1.lst = list.files("R-sample-tiles/9529", pattern=".tif", full.names=TRUE, recursive=TRUE) 
> ##D year.span = c(2000:2020)
> ##D df = readOGR("/data/eumap/sample-data/R-sample-tiles/9529_croatia_landcover_samples.gpkg")
> ##D df <- as.data.frame(df)
> ##D df$Date = format.Date(as.Date(paste(df$survey_date), format="%Y/%m/%d"), "%Y-%m-%d")
> ##D df$row.id = 1:nrow(df)
> ##D begin.tif1.lst = sapply(tif1.lst, function(i){strip_years(i, type="begin")})
> ##D end.tif1.lst = sapply(tif1.lst, function(i){strip_years(i, type="end")})
> ##D x = extract_tif(tif=tif1.lst, df, date="Date", begin=begin, end=end, coords=c("x","y"))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("extract_tif", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_spm")
> ### * plot_spm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_spm
> ### Title: Plot Spatial Matrix,
> ### Aliases: plot_spm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D plt = eumap::plot_spm(df, gmode  = "norm" , gtype = "var.imp")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_spm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict_spm")
> ### * predict_spm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict_spm
> ### Title: Predict_spm
> ### Aliases: predict_spm
> 
> ### ** Examples
> 
> ## Not run: 
> ##D predict.variable = eumap::predict_spm(object, newdata)
<<<<<<< Updated upstream
> ## End(Not run) 
=======
> ## End(Not run)
>>>>>>> Stashed changes
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict_spm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("strip_dates")
> ### * strip_dates
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: strip_dates
> ### Title: Strip dates from tifs
> ### Aliases: strip_dates
> 
> ### ** Examples
> 
> ## Not run: 
> ##D tif.name = "R-sample-tiles/9529/2000/landsat_ard_fall_blue_p50.tif"
> ##D strip_dates(tif.name, type="begin")
> ##D strip_dates(tif.name, type="end")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("strip_dates", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("strip_years")
> ### * strip_years
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: strip_years
> ### Title: Strip dates from tifs
> ### Aliases: strip_years
> 
> ### ** Examples
> 
> ## Not run: 
> ##D tif.name = "R-sample-tiles/9529/2000/landsat_ard_fall_blue_p50.tif"
> ##D strip_years(tif.name, type="begin")
> ##D strip_years(tif.name, type="end")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("strip_years", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("train_spm")
> ### * train_spm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: train_spm
> ### Title: Train a spatial prediction model, from a (spatial) matrix, using
> ###   ensemble machine learning,
> ### Aliases: train_spm
> 
> ### ** Examples
> 
<<<<<<< Updated upstream
> ## Meuse Demo
> library(sp)
> library(mlr3verse)
Loading required package: mlr3
Loading required package: mlr3filters
Loading required package: mlr3learners
Loading required package: mlr3pipelines
Loading required package: mlr3tuning
Loading required package: mlr3viz
Loading required package: paradox
> library(mlr3spatiotempcv)
> library(checkmate)
> library(future)
> library(progress)
> library(scales)
> library(eumap)
> demo(meuse, echo=FALSE)
Warning in showSRID(uprojargs, format = "PROJ", multiline = "NO", prefer_proj = prefer_proj) :
  Discarded datum Amersfoort in CRS definition
> df <- as.data.frame(meuse)
> df.grid <- as.data.frame(meuse.grid)
> df = na.omit(df[,])
> df.grid = na.omit(df.grid[,])
> smp_size <- floor(0.8 * nrow(df))
> set.seed(123)
> train_ind <- sample(seq_len(nrow(df)), size = smp_size)
> df.tr <- df[, c("x","y","dist","ffreq","soil","lead")]
> df.ts <- df.grid[, c("x","y","dist","ffreq","soil")]
> newdata <-df.ts
> tr = eumap::train_spm(df.tr, target.variable = "lead",crs )
Error in self$assert(xs) : 
  Assertion on 'xs' failed: folds: Must be of type 'single integerish value', not 'NULL'.
Calls: <Anonymous> ... <Anonymous> -> .__ParamSet__assert -> makeAssertion -> mstop
=======
> library(sp)
> library(mlr3verse)
Warning: package 'mlr3verse' was built under R version 4.0.3
Loading required package: mlr3
Warning: package 'mlr3' was built under R version 4.0.3
Loading required package: mlr3filters
Warning: package 'mlr3filters' was built under R version 4.0.3
Loading required package: mlr3learners
Warning: package 'mlr3learners' was built under R version 4.0.3
Loading required package: mlr3pipelines
Warning: package 'mlr3pipelines' was built under R version 4.0.3
Loading required package: mlr3tuning
Warning: package 'mlr3tuning' was built under R version 4.0.3
Loading required package: mlr3viz
Warning: package 'mlr3viz' was built under R version 4.0.3
Warning: replacing previous import 'vctrs::data_frame' by 'tibble::data_frame' when loading 'dplyr'
Loading required package: paradox
Warning: package 'paradox' was built under R version 4.0.3
> library(mlr3spatiotempcv)
> library(checkmate)
> library(future)
Warning: package 'future' was built under R version 4.0.3
> library(scales)
Warning: package 'scales' was built under R version 4.0.3
> library(eumap)
> df <- as.data.frame(meuse)
Error in as.data.frame(meuse) : object 'meuse' not found
>>>>>>> Stashed changes
Execution halted
